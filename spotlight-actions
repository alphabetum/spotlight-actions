#!/usr/bin/env bash
###############################################################################
# spotlight-actions
#
# Use Spotlight on macOS to trigger actions, such as opening the login window,
# putting the system to sleep, or logging in as another user.
#
# https://github.com/alphabetum/spotlight-actions
#
# Copyright (c) 2018 William Melody • hi@williammelody.com
###############################################################################

###############################################################################
# Strict Mode
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

###############################################################################
# Utilities
###############################################################################

_command_exists() {
  hash "${1}" 2>/dev/null
}

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  %s " "${__DEBUG_COUNTER}"
    "${@}"
    printf "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n"
  fi
}

_log_success() {
  if [[ -n "${1:-}" ]]
  then
    printf "✅ %s\\n" "${1}"
  fi
}

###############################################################################
# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
# and `readlink -e`, which canonicalize by following every symlink in every
# component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

_remove() {
  local _command="rm -r"
  if _command_exists "trash"
  then
    _command="trash"
  fi

  if [[ -n "${1:-}" ]] && [[ -e "${1}" ]]
  then
    "${_command}" "${1}"
  fi
}

###############################################################################
# Environment
###############################################################################

export _ACTIONS_DIRECTORY
_ACTIONS_DIRECTORY="$(dirname "$(_readlink -f "$0")")/Actions"

export _TARGET_DIRECTORY
_TARGET_DIRECTORY="/Applications/Spotlight Actions"

###############################################################################
# Templates
###############################################################################

# _ACCOUNT_SCRIPT_TEMPLATE
#
# Script template for creating an app that logs in as the user with the same
# name as the app..
export _ACCOUNT_SCRIPT_TEMPLATE
read -r -d '' _ACCOUNT_SCRIPT_TEMPLATE <<HEREDOC || true
#!/usr/bin/env bash
_switch_to_the_user_with_the_same_name_as_this_app_bundle() {
  # Get username from the application bundle name.
  local _username="\$(
    ps -o comm= \$PPID \
    | grep -oh '[^/]\+.app' \
    | sed -e 's/.app//' \
    | sed -e 's/MacOS//'
  )"
  local _user_id=\$(id -u "\${_username}")
  local _dialog_message

  if [[ -z "\${_user_id:-}" ]]
  then
    read -r -d '' "_dialog_message" <<DIALOG_MESSAGE_HEREDOC
No user named '\${_username}' found. To recreate Actions run:
  spotlight-actions
DIALOG_MESSAGE_HEREDOC
    osascript -e "display dialog \"\${_dialog_message}\""
  elif [[ "\$(whoami)" == "\${_username}" ]]
  then
    osascript -e "display dialog \"Already logged in to '\${_username}'.\""
  else
    "/System/Library/CoreServices/Menu Extras/User.menu/Contents/Resources/CGSession" -switchToUserID "\${_user_id}"
  fi
} && _switch_to_the_user_with_the_same_name_as_this_app_bundle
HEREDOC

# _APPLESCRIPT_APP_TEMPLATE
#
# Generic wrapper template for running a shell script in an app bundle.
export _APPLESCRIPT_APP_TEMPLATE
read -r -d '' _APPLESCRIPT_APP_TEMPLATE <<HEREDOC || true
#!/usr/bin/osascript
set current_path to (path to me)
do shell script "."  & quote & POSIX path of current_path & quote & "Contents/Resources/Scripts/shellscript"
HEREDOC

# _ACCOUNT_SCRIPT_TEMPLATE
#
# Script template for creating an app that logs in as the user with the same
# name as the app..
export _LOGIN_WINDOW_SCRIPT_TEMPLATE
read -r -d '' _LOGIN_WINDOW_SCRIPT_TEMPLATE <<HEREDOC || true
#!/usr/bin/env bash
_go_to_login_window() {
  "/System/Library/CoreServices/Menu Extras/User.menu/Contents/Resources/CGSession" -suspend
} && _go_to_login_window
HEREDOC

###############################################################################
# Primary Functions
###############################################################################

###############################################################################
# _create_action()
#
# Usage:
#   _create_action <name>
_create_action() {
  local _name="${1:-}"

  if [[ -z "${_name}" ]]
  then
    printf "Name not found.\\n" 1>&2
    return 1
  fi

  local _temp_file_path
  _temp_file_path="$(mktemp "/tmp/spotlight-action.${_name}.XXXXXX")" || exit 1

  cat "${_ACTIONS_DIRECTORY}/${_name}/main.scpt" > "${_temp_file_path}"

  if [[ -n "${_temp_file_path}" ]] && [[ "${_temp_file_path}" =~ ^/tmp ]]
  then
    local _target_app_path="${_TARGET_DIRECTORY}/${_name}.app"
    _remove "${_target_app_path}"

    osacompile -o "${_target_app_path}" "${_temp_file_path}"
    _log_success "\"${_target_app_path}\""
  fi

  _remove "${_temp_file_path}"
}

###############################################################################
# _create_target_directory()
#
# Create the target directory that will contain the appllication bundles.
_create_target_directory() {
  if [[ ! -d "${_TARGET_DIRECTORY}" ]]
  then
    local _dialog_message
    read -r -d '' _dialog_message <<HEREDOC || true
"${_TARGET_DIRECTORY}" not found. Would you like to create it? [y/N] 
HEREDOC

    while true
    do
      read -r -p "${_dialog_message}" _yn

      case "${_yn}" in
        [Yy]* )
          break
          ;;
        * )
          printf "Exiting...\\n"
          exit 0
          ;;
      esac
    done

    mkdir -p "${_TARGET_DIRECTORY}"
  fi

  if [[ -d "${_TARGET_DIRECTORY}" ]]
  then
    _log_success "\"${_TARGET_DIRECTORY}\""
  fi
} && _create_target_directory

###############################################################################
# _create_actions_for_accounts
#
# Create an app for each account that brings up the login window for that
# account.
_debug "Starting \`_create_action_for_accounts()\`\\n"
_create_actions_for_accounts() {
  local _users_and_ids
  _users_and_ids=($(dscl . list /Users uid | grep -v '^_'))

  for __user in ${_users_and_ids[@]}
  do
    local _username
    _username="$(echo "${__user}" | awk '{print $1}')"

    # Only print users with valid home directories, which is used here as an
    # indication that the account is a valid login account. So far I've been
    # unable to find a better way to list only full login user accounts.
    local _home_directory
    _home_directory="$(
      dscl . -read "/Users/${_username}" NFSHomeDirectory | \
        awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}'
    )"

    # Skip system users
    if [[ "${_username}" == "root" ]]         ||
       [[ "${_username}" == "daemon" ]]       ||
       [[ "${_home_directory}" =~ ^/var.* ]]  ||
       [[ "${_home_directory}" =~ ^/dev.* ]]  ||
       [[ "${_home_directory}" =~ ^/opt.* ]]
    then
      continue
    fi

    local _temp_file_path
    _temp_file_path="$(mktemp "/tmp/spotlight-action.XXXXXX")" || exit 1
    printf "%s\\n" "${_APPLESCRIPT_APP_TEMPLATE}" > "${_temp_file_path}"

    if [[ -n "${_temp_file_path}" ]] && [[ "${_temp_file_path}" =~ ^/tmp ]]
    then
      local _target_app_path="${_TARGET_DIRECTORY}/${_username}.app"
      _remove "${_target_app_path}"

      osacompile -o "${_target_app_path}" "${_temp_file_path}"
      local _target_app_script_path="${_target_app_path}/Contents/Resources/Scripts/shellscript"
      printf "%s\\n" "${_ACCOUNT_SCRIPT_TEMPLATE}" > "${_target_app_script_path}"
      chmod +x "${_target_app_script_path}"

      cp \
        "/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/UserIcon.icns" \
        "${_target_app_path}/Contents/Resources/applet.icns"
      _log_success "\"${_target_app_path}\""
    fi

    rm "${_temp_file_path}"
  done
} # && _create_actions_for_accounts

###############################################################################
# _create_login_window_action()
#
# Create an application that opens the login window.
_create_login_window_action() {
  local _temp_file_path
  _temp_file_path="$(mktemp "/tmp/spotlight-action.XXXXXX")" || exit 1
  printf "%s\\n" "${_APPLESCRIPT_APP_TEMPLATE}" > "${_temp_file_path}"

  if [[ -n "${_temp_file_path}" ]] && [[ "${_temp_file_path}" =~ ^/tmp ]]
  then
    local _target_app_path="${_TARGET_DIRECTORY}/Login Window.app"
    _remove "${_target_app_path}"

    osacompile -o "${_target_app_path}" "${_temp_file_path}"
    local _target_app_script_path="${_target_app_path}/Contents/Resources/Scripts/shellscript"
    printf "%s\\n" "${_LOGIN_WINDOW_SCRIPT_TEMPLATE}" > "${_target_app_script_path}"
    chmod +x "${_target_app_script_path}"

    cp \
      "/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GroupIcon.icns" \
      "${_target_app_path}/Contents/Resources/applet.icns"
    _log_success "\"${_target_app_path}\""
  fi

  rm "${_temp_file_path}"
} # && _create_login_window_action

###############################################################################
# _create_sleep_action()
#
# Create an application that sends the system to sleep.
_create_sleep_action() {
  _create_action "Sleep"
} && _create_sleep_action

###############################################################################
# _create_log_out_action()
#
# Create an application that logs out the current user.
_create_log_out_action() {
  _create_action "Log Out"
} && _create_log_out_action
