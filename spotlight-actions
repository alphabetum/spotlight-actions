#!/usr/bin/env bash
###############################################################################
# spotlight-actions
#
# Use Spotlight on macOS to trigger actions, such as opening the login window,
# putting the system to sleep, or logging in as another user.
#
# https://github.com/alphabetum/spotlight-actions
#
# Copyright (c) 2018 William Melody ‚Ä¢ hi@williammelody.com
###############################################################################

###############################################################################
# Strict Mode
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

###############################################################################
# Utilities
###############################################################################

# _command_exists()
#
# Usage:
#   _command_exists <command-name>
#
# Returns:
#   0  If a command with the given name is defined in the current environment.
#   1  If not.
#
# Information on why `hash` is used here:
# http://stackoverflow.com/a/677212
_command_exists() {
  hash "${1}" 2>/dev/null
}

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    # Prefix debug message with "bug (U+1F41B)"
    printf "üêõ  %s " "${__DEBUG_COUNTER}"
    "${@}"
    printf "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\\n"
  fi
}

# _log_success()
#
# Usage:
#   _log_success <message>
_log_success() {
  if [[ -n "${1:-}" ]]
  then
    printf "‚úÖ %s\\n" "${1}"
  fi
}

# _readlink()
#
# Usage:
#   _readlink [-e|-f|<options>] <path/to/symlink>
#
# Options:
#   -f  All but the last component must exist.
#   -e  All components must exist.
#
# Wrapper for `readlink` that provides portable versions of GNU `readlink -f`
# and `readlink -e`, which canonicalize by following every symlink in every
# component of the given name recursively.
#
# More Information:
#   http://stackoverflow.com/a/1116890
_readlink() {
  local _target_path
  local _target_file
  local _final_directory
  local _final_path
  local _option

  for __arg in "${@:-}"
  do
    case "${__arg}" in
      -e|-f)
        _option="${__arg}"
        ;;
      -*)
        # do nothing
        # ':' is bash no-op
        :
        ;;
      *)
        if [[ -z "${_target_path:-}" ]]
        then
          _target_path="${__arg}"
        fi
        ;;
    esac
  done

  if [[ -z "${_option}" ]]
  then
    readlink "${@}"
  else
    if [[ -z "${_target_path:-}" ]]
    then
      printf "_readlink: missing operand\\n"
      return 1
    fi

    cd "$(dirname "${_target_path}")" || return 1
    _target_file="$(basename "${_target_path}")"

    # Iterate down a (possible) chain of symlinks
    while [[ -L "${_target_file}" ]]
    do
      _target_file="$(readlink "${_target_file}")"
      cd "$(dirname "${_target_file}")" || return 1
      _target_file="$(basename "${_target_file}")"
    done

    # Compute the canonicalized name by finding the physical path
    # for the directory we're in and appending the target file.
    _final_directory="$(pwd -P)"
    _final_path="${_final_directory}/${_target_file}"

    if [[ "${_option}" == "-f" ]]
    then
      printf "%s\\n" "${_final_path}"
      return 0
    elif [[ "${_option}" == "-e" ]]
    then
      if [[ -e "${_final_path}" ]]
      then
        printf "%s\\n" "${_final_path}"
        return 0
      else
        return 1
      fi
    else
      return 1
    fi
  fi
}

# _remove()
#
# Usage:
#   _remove <path>
#
# Use trash for deletion when available.
_remove() {
  local _command="rm -r"
  if _command_exists "trash"
  then
    _command="trash"
  fi

  if [[ -n "${1:-}" ]] && [[ -e "${1}" ]]
  then
    "${_command}" "${1}"
  fi
}

###############################################################################
# Environment
###############################################################################

# $_VERSION
#
# The current program version.
_VERSION="0.0.1.alpha"

# $_ME
#
# Set to the program's basename.
_ME=$(basename "${0}")

# $_MY_DIRECTORY
#
# The location of the current program directory.
_MY_DIRECTORY=$(dirname "$(_readlink -f "$0")")

# $_ACTIONS_DIRECTORY
#
# The location of the .spotlight-action definitions.
_ACTIONS_DIRECTORY="${_MY_DIRECTORY}/Actions"

# $_TARGET_DIRECTORY
#
# The location to install the build spotlight action application bundles.
_TARGET_DIRECTORY="/Applications/Spotlight Actions"

###############################################################################
# Templates
###############################################################################

# _APPLESCRIPT_SHELL_SCRIPT_APP_TEMPLATE
#
# Generic wrapper template for running a shell script in an app bundle.
export _APPLESCRIPT_SHELL_SCRIPT_APP_TEMPLATE
read -r -d '' _APPLESCRIPT_SHELL_SCRIPT_APP_TEMPLATE <<HEREDOC || true
#!/usr/bin/osascript
set current_path to (path to me)
do shell script "." & quote & POSIX path of current_path & quote & "Contents/Resources/Scripts/script.sh"
HEREDOC

###############################################################################
# Options
###############################################################################

# Parse Options ###############################################################

# Initialize program option variables.
_PRINT_HELP=0
_PRINT_VERSION=0
_USE_DEBUG=0

# Initialize additional expected option variables.
_SUBCOMMAND="help"
_ARGUMENTS=("${0}")

# getopts and getopts have inconsistent behavior, so using a simple home-brewed
# while loop. This isn't perfectly compliant with POSIX, but it's close enough
# and this appears to be a widely used approach.
#
# More info:
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
while [[ ${#} -gt 0 ]]
do
  opt="${1}"
  shift
  case "${opt}" in
    -h|--help|help)
      _PRINT_HELP=1
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    --version)
      _PRINT_VERSION=1
      ;;
    install|list|uninstall)
      _SUBCOMMAND="${opt}"
      ;;
    --endopts)
      # Terminate option parsing.
      break
      ;;
    *)
      _ARGUMENTS+=("${opt}")
      ;;
  esac
done

_debug printf "\${_SUBCOMMAND}: %s\\n" "${_SUBCOMMAND}"
_debug printf "\${_ARGUMENTS[*]:-}: %s\\n" "${_ARGUMENTS[*]:-}"

###############################################################################
# Primary Functions
###############################################################################

###############################################################################
# _build_action()
#
# Usage:
#   _build_action <name> [<app name>]
_build_action() {
  local _action_name="${1:-}"

  if [[ -z "${_action_name}" ]]
  then
    printf "No action name specified.\\n" 1>&2
    return 1
  fi

  local _app_name="${2:-}"

  if [[ -z "${_app_name}" ]]
  then
    _app_name="${_action_name}"
  fi

  local _action_path="${_ACTIONS_DIRECTORY}/${_action_name}"

  if [[ ! -d "${_action_path}" ]]
  then
    printf "'%s' not found.\\n" "${_action_path}" 1>&2
  fi

  local _temp_file_path
  _temp_file_path="$(mktemp "/tmp/spotlight-action.${_action_name}.XXXXXX")" || exit 1

  if [[ -e "${_action_path}/main.scpt" ]]
  then
    cat "${_action_path}/main.scpt" > "${_temp_file_path}"
  elif [[ -e "${_action_path}/script.sh" ]]
  then
    cat "${_APPLESCRIPT_SHELL_SCRIPT_APP_TEMPLATE}" > "${_temp_file_path}"
  else
    printf "No shell script or AppleScript specified.\\n" 1>&2
    exit 1
  fi

  if [[ -n "${_temp_file_path}" ]] && [[ "${_temp_file_path}" =~ ^/tmp ]]
  then
    local _target_app_path="${_TARGET_DIRECTORY}/${_app_name}.app"
    _remove "${_target_app_path}"

    osacompile -o "${_target_app_path}" "${_temp_file_path}"

    if [[ -e "${_action_path}/script.sh" ]]
    then
      local _target_app_script_path="${_target_app_path}/Contents/Resources/Scripts/script.sh"
      cat "${_action_path}/script.sh" > "${_target_app_script_path}"
      chmod +x "${_target_app_script_path}"
    fi

    if [[ -e "${_action_path}/icon.icns" ]]
    then
      cp \
        "${_action_path}/icon.icns" \
        "${_target_app_path}/Contents/Resources/applet.icns"
    fi

    _log_success "\"${_target_app_path}\""
  fi

  _remove "${_temp_file_path}"
}

###############################################################################
# Setup
###############################################################################

# _create_target_directory()
#
# Create the target directory that will contain the appllication bundles.
_create_target_directory() {
  if [[ ! -d "${_TARGET_DIRECTORY}" ]]
  then
    local _dialog_message
    read -r -d '' _dialog_message <<HEREDOC || true
"${_TARGET_DIRECTORY}" not found. Would you like to create it? [y/N] 
HEREDOC

    while true
    do
      read -r -p "${_dialog_message}" _yn

      case "${_yn}" in
        [Yy]* )
          break
          ;;
        * )
          printf "Exiting...\\n"
          exit 0
          ;;
      esac
    done

    mkdir -p "${_TARGET_DIRECTORY}"

    if [[ -d "${_TARGET_DIRECTORY}" ]]
    then
      _log_success "\"${_TARGET_DIRECTORY}\""
    fi
  fi
} && _create_target_directory

###############################################################################
# Program Functions
###############################################################################

# --------------------------------------------------------------------- _help()
# _help()
#
# Usage:
#   _help
#
# Description:
#   Print the program help information.
_help() {
  cat <<HEREDOC
Spotlight Actions

Manage Spotlight Actions.

Usage:
  ${_ME} list
  ${_ME} install
  ${_ME} uninstall
  ${_ME} -h | --help | help
  ${_ME} --version

Subcommands:
  list       List all available actions.
  install    Install the specified action.
  uninstall  Uninstall the specified action.
  help       Display this help information.

Options:
  -h --help  Display this help information.
  --version  Display version information.
HEREDOC
}

# ------------------------------------------------------------------ _install()
# _install()
#
# Usage:
#   _install <action>
#
# Description:
#   Install the action with the specified name..
_install() {
  local _action_name="${1:-}"

  if [[ -z "${_action_name}" ]]
  then
    printf "No action name specified.\\n" 1>&2
    return 1
  fi

  local _action_path="${_ACTIONS_DIRECTORY}/${_action_name}"

  if [[ ! -d "${_action_path}" ]]
  then
    printf "'%s' not found.\\n" "${_action_path}" 1>&2
  fi

  if [[ -e "${_action_path}/install.sh" ]]
  then
    source "${_action_path}/install.sh"
  else
    _build_action "${_action_name}"
  fi
}

# --------------------------------------------------------------------- _list()
# _list()
#
# Usage:
#   _list
#
# Description:
#   List available actions.
_list() {
  if [[ -d "${_ACTIONS_DIRECTORY}" ]]
  then
    for __action in "${_ACTIONS_DIRECTORY}"/*
    do
      local _basename
      _basename="$(
        basename "${__action}" | sed 's|\.[^\.]*$||g'
      )"

      local _installed=0
      if [[ -e "${_TARGET_DIRECTORY}/${_basename}.app" ]]
      then
        _installed=1
      fi

      if ((_installed))
      then
        printf "\"%s\" (installed)\\n" "${_basename}"
      else
        printf "\"%s\"\\n" "${_basename}"
      fi
    done
  fi
}

# ------------------------------------------------------------------ _uninstall()
# _uninstall()
#
# Usage:
#   _uninstall <action>
#
# Description:
#   Uninstall the action with the specified name..
_uninstall() {
  local _action_name="${1:-}"

  if [[ -z "${_action_name}" ]]
  then
    printf "No action name specified.\\n" 1>&2
    return 1
  fi

  local _action_path="${_ACTIONS_DIRECTORY}/${_action_name}"

  if [[ ! -d "${_action_path}" ]]
  then
    printf "'%s' not found.\\n" "${_action_path}" 1>&2
  fi

  if [[ -e "${_action_path}/uninstall.sh" ]]
  then
    source "${_action_path}/uninstall.sh"
  else
    if [[ ! -d "${_TARGET_DIRECTORY}/${_action_name}.app" ]]
    then
      printf "'%s' not installed.\\n" "${_action_path}" 1>&2
    fi

    _remove "${_TARGET_DIRECTORY}/${_action_name}.app"
  fi
}

# ------------------------------------------------------------------ _version()
# _version()
#
# Usage:
#   _version
#
# Description:
#   Print the value of $_VERSION.
_version() {
  printf "%s\\n" "${_VERSION}"
}

###############################################################################
# Main
###############################################################################

_main() {
  if ((_PRINT_HELP))
  then
    _help
  elif ((_PRINT_VERSION))
  then
    _version
  else
    "_${_SUBCOMMAND}" "${_ARGUMENTS[@]:1}"
  fi
}

_main "${@:-}"
